# -*- coding: utf-8 -*-
from random import shuffle
import tensorflow as tf
import numpy as np
import os
import sys
import time
import cv2
import easydict

FLAGS = easydict.EasyDict({
    "img_path": "/content/test/",
    "img_size": 28,
    "tfrecord": "/content/TFdata/Cifar_test.tfrecord"

})

def _img_func(example_proto):       # tfrecord read
    image_feature = {'height': tf.io.FixedLenFeature([], tf.int64),
        'width': tf.io.FixedLenFeature([], tf.int64),
        'depth': tf.io.FixedLenFeature([], tf.int64),
        'image_raw': tf.io.FixedLenFeature([], tf.string),
        'label': tf.io.FixedLenFeature([], tf.int64),
        'name':tf.io.FixedLenFeature([], tf.string)}

    single_parse = tf.io.parse_single_example(example_proto, image_feature)
    image_decode = tf.image.decode_png(single_parse['image_raw'])
    image_decode = tf.image.resize(image_decode, [FLAGS.img_size, FLAGS.img_size])
    image_decode = tf.image.convert_image_dtype(image_decode, tf.uint8)

    return image_decode, single_parse['name']

def main():
    data_generator = tf.data.TFRecordDataset(FLAGS.tfrecord)       # both shape must equal
    data_generator = data_generator.map(_img_func)
    data_generator = data_generator.batch(1)
    data_generator = data_generator.prefetch(tf.data.experimental.AUTOTUNE)
    print(data_generator)
    it = iter(data_generator) 
    for i in range(10000):    # Number of database
        A_image, A_name = next(it)
        # A_image = tf.squeeze(A_image, 3)
        A_name = tf.compat.as_str_any(A_name[0].numpy()).split('/')[3]  

         #print(A_name, B_name)
        cv2.imwrite('{}/{}'.format(FLAGS.img_path, A_name), A_image[0].numpy())
        #plt.imsave('{}/{}'.format(FLAGS.img_path, A_name), A_image[0].numpy(), cmap = 'gray')

        if i % 1000 == 0:
            print('Complete copy the data... {}'.format(i + 1))



if __name__ == "__main__":
    main()
